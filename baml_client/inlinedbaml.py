###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "answer_question.baml": "// Define a class to represent a structured context item\nclass ContextItem {\n  content string\n  source string? // Source/link is optional\n}\n\nclass Source {\n  index int\n  source string\n  source_type string\n}\n// AnswerQuestion: Compose a final answer using the question and structured context info\nclass Answer {\n  cited_answer string @description(\"The final answer with inline citations like [0], [1] referring to the context items.\")\n  // Updated references to be a list of strings\n  references Source[] @description(\"A numerical list of source URLs/identifiers corresponding to the citations used in the answer.\")\n}\n\n// Updated function signature to accept a list of ContextItem objects\nfunction AnswerQuestion(question: string, context: ContextItem[]) -> Answer {\n  client Gemini2FlashClient\n\n  prompt #\"\"\"\n    You are an expert writing a detailed answer to the user's question using the provided structured context information.\n    Use the context items to ensure accuracy and completeness.\n    **Cite the context items used for each part of your answer using bracketed numbers corresponding to the list below (e.g., [0], [1]).**\n    Integrate the information naturally. Do not just list the context content verbatim.\n    If the context contains a current price or specific data, include it in the answer with its citation.\n    After generating the `cited_answer`, list all the `source` fields from the context items you actually cited in the `references` field. Only include sources that were cited. If a cited item has no source, omit it from the references list.\n    The answer should fully address the question.\n\n    Question: {{ question }}\n\n    Context Items:\n    // Updated context loop to iterate over ContextItem objects and access their fields\n    {% for item in context %}\n    [{{ loop.index0 }}] Content: {{ item.content }}\n       Source: {{ item.source or \"N/A\" }}\n    {% endfor %}\n\n    ----\n    {{ ctx.output_format }}\n  \"\"\"#\n}\n\n// Tests for AnswerQuestion\ntest answer_with_general_context {\n  functions [AnswerQuestion]\n  args {\n    question \"How does photosynthesis work in plants?\"\n    context [\n      { \n        content \"Photosynthesis uses sunlight, water, and carbon dioxide to create glucose (sugar) and oxygen.\", \n        source \"http://example.com/photosynthesis-basics\" \n      },\n      { \n        content \"Chlorophyll, the green pigment in leaves, absorbs sunlight.\", \n        source \"http://example.com/chlorophyll-role\"\n      },\n      { \n        content \"The process primarily occurs in chloroplasts within plant cells.\", \n        source \"http://example.com/chloroplasts\" \n      },\n      { \n        content \"Oxygen is released as a byproduct.\", \n        source null // Example with no source\n      }\n    ]\n  }\n  @@assert({{ this.cited_answer != \"\"}})\n  @@assert({{ \"glucose\" in this.cited_answer or \"oxygen\" in this.cited_answer or \"chlorophyll\" in this.cited_answer }})\n  @@assert({{ \"[0]\" in this.cited_answer or \"[1]\" in this.cited_answer or \"[2]\" in this.cited_answer or \"[3]\" in this.cited_answer }})\n  // Check if references are generated correctly (at least the ones with sources)\n  @@assert({{ this.references | length >= 2 }})\n  @@assert({{ \"http://example.com/photosynthesis-basics\" in (this.references | map(attribute='source') | list) }})\n}\n",
    "clarify_question.baml": "class Clarification {\n  needed bool\n  question string\n}\n\nfunction ClarifyQuestion(question: string) -> Clarification {\n  client Gemini2FlashClient\n\n  prompt #\"\"\"\n    You are a helpful assistant analyzing a user query for clarity.\n    Determine if the query needs clarification. \n\n    If the query is sufficiently clear and specific, output:\n    - needed: false \n    - question: \"\"  (empty string)\n\n    If the query is ambiguous or missing details, output:\n    - needed: true \n    - question: a single, concise clarifying question to ask the user.\n\n    Make sure to follow the output format strictly.\n    \n    User Query: \"{{ question }}\"\n    ----\n    {{ ctx.output_format }}\n  \"\"\"#\n}\n\ntest clarify_no_clarification_needed {\n  functions [ClarifyQuestion]\n  args { question \"What is the capital of France?\" }\n  @@assert({{ this.needed == false }})\n  @@assert({{ this.question == \"\" }})\n}\n\ntest clarify_needs_clarification {\n  functions [ClarifyQuestion]\n  args { question \"Tell me about that recent discovery.\" }\n  @@assert({{ this.needed == true }})\n  @@assert({{ this.question|length > 5 }})\n  @@assert({{ this.question|regex_match(\"(?i)(discovery|which|what)\") }})\n}\n",
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> Gemini2FlashClient {\n  provider \"google-ai\"\n  options {\n    model \"gemini-2.0-flash\"\n    api_key env.GEMINI_API_KEY\n  }\n}\n\nclient<llm> Gemini2_5FlashClient {\n  provider \"google-ai\"\n  options {\n    model \"gemini-2.5-flash-preview-04-17\"\n    api_key env.GEMINI_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "critique_answer.baml": "// CritiqueAnswer: Verify the answer's quality and identify missing information if any\nclass Critique {\n  is_good bool\n  missing_info string\n}\n\nfunction CritiqueAnswer(question: string, answer: string) -> Critique {\n  client Gemini2FlashClient\n\n  prompt #\"\"\"\n    You are a critical evaluator of the assistant's answer.\n    Evaluate the answer against the question:\n    - If the answer is fully correct, addresses all parts of the question, and is sufficiently detailed, set is_good to true and missing_info to \"\".\n    - If something is missing, incorrect, or not thoroughly answered, set is_good to false and provide missing_info: a short phrase indicating what info is missing or needs correction (suitable for a search query). Do NOT write a full sentence, just keywords or a brief topic.\n\n    Question: \"{{ question }}\"\n    Answer: \"{{ answer }}\"\n    \n    {{ ctx.output_format }}\n  \"\"\"#\n}\n\n// Tests for CritiqueAnswer\ntest critique_complete_answer {\n  functions [CritiqueAnswer]\n  args { \n    question \"What is 2+2?\", \n    answer \"2+2 is 4.\" \n  }\n  @@assert({{ this.is_good == true }})\n  @@assert({{ this.missing_info == \"\" }})\n}\n\ntest critique_incomplete_answer {\n  functions [CritiqueAnswer]\n  args { \n    question \"What are the benefits and risks of Bitcoin?\", \n    answer \"Bitcoin's benefits include decentralization and fast transactions.\" \n  }\n  // The answer did not cover risks, expect critique to flag missing info about risks\n  @@assert({{ this.is_good == false }})\n  @@assert({{ \"risk\" in this.missing_info | lower() }})\n}\n\ntest critique_incomplete_general_answer {\n  functions [CritiqueAnswer]\n  args { \n    question \"Describe the water cycle, including evaporation and precipitation.\", \n    answer \"The water cycle involves water evaporating from the surface due to heat.\" \n  }\n  // The answer only mentioned evaporation, not precipitation. Expect critique to flag missing info about precipitation.\n  @@assert({{ this.is_good == false }})\n  @@assert({{ \"precipitation\" in this.missing_info | lower() or \"rainfall\" in this.missing_info | lower() }})\n}\n",
    "generate_subqueries.baml": "// GenerateSubqueries: Create multiple search queries based on the question (and clarification if provided)\nfunction GenerateSubqueries(question: string, clarification_details: string) -> string[] {\n  client Gemini2FlashClient\n\n  prompt #\"\"\"\n    You are a query generation assistant. Create 2 to 5 diverse search queries to find information for answering the question.\n    If additional clarification is provided, incorporate that detail.\n    Make each query concise and focused on an aspect of the question.\n    \n    Question: \"{{ question }}\"\n    {% if clarification_details %}\n    Additional detail: \"{{ clarification_details }}\"\n    {% endif %}\n    \n    {{ ctx.output_format }}\n  \"\"\"#\n}\n\n// Tests for GenerateSubqueries\ntest generate_subqueries_basic {\n  functions [GenerateSubqueries]\n  args { question \"What is blockchain technology used for?\", clarification_details \"\" }\n  // Expect at least 2 subqueries returned\n  @@assert({{ this|length >= 2 }})\n  @@assert({{ this[0]|regex_match(\".*\") }})\n}\n\ntest generate_subqueries_with_clarification {\n  functions [GenerateSubqueries]\n  args { \n    question \"Tell me about the history of computers.\", \n    clarification_details \"Focus on the development of personal computers in the 1980s.\" \n  }\n  // Expect queries specifically about 1980s personal computers\n  @@assert({{ this|length >= 2 }})\n  @@assert({{ \n      (this[0] + \" \" + this[1] + \" \" + (this[2] if this|length > 2 else \"\"))\n      |regex_match(\"(?i)(personal computer|1980s|home computer)\") \n  }})\n}\n",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.86.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "plan_steps.baml": "// PlanSteps: Decide which tools and steps are needed to answer the question\nenum Tool {\n  WebSearch \n  PriceLookup\n}\n\nclass Step {\n  tool Tool\n  query string\n}\n\nclass Plan {\n  steps Step[]\n}\n\nfunction PlanSteps(question: string, subqueries: string[]) -> Plan {\n  client Gemini2FlashClient\n\n  prompt #\"\"\"\n    You are a planning assistant with access to the following tools:\n    - WebSearch: use this to search the web for general information.\n    - PriceLookup: use this to get the current price of a specific item (e.g., a stock ticker, a known commodity, a cryptocurrency). Check if the query seems to be asking for a specific item's price.\n    \n    Given the user question and potential subqueries, create a step-by-step plan using these tools to gather information.\n    - If the question explicitly asks for a current price or price-related info of a specific, named item, consider using a PriceLookup step for that item.\n    - For other informational needs, use one or more WebSearch steps (one per subquery or topic aspect).\n    - Use at most 5 steps in total. Include only relevant steps.\n    \n    User Question: \"{{ question }}\"\n    Candidate Subqueries:\n    {% for q in subqueries %}\n    - {{ q }}\n    {% endfor %}\n    \n    ----\n    {{ ctx.output_format }}\n  \"\"\"#\n}\n\n// Tests for PlanSteps\ntest plan_steps_general_info_question {\n  functions [PlanSteps]\n  args { \n    question \"What is the main function of the mitochondria?\", \n    subqueries [\"mitochondria function\", \"cellular respiration\"] \n  }\n  // Expect only WebSearch steps (no PriceLookup needed)\n  @@assert({{ (this.steps|selectattr('tool', 'equalto', Tool.PriceLookup)|list)|length == 0 }})\n  @@assert({{ this.steps | length >= 1 }})\n}\n\ntest plan_steps_potential_price_question {\n  functions [PlanSteps]\n  args { \n    question \"What is the current price of GOOGL stock?\", // Example price query\n    subqueries [\"GOOGL stock price\"] \n  }\n  // Expect a PriceLookup step (even if the tool might not support it yet, the plan should reflect intent)\n  @@assert({{ (this.steps|selectattr('tool', 'equalto', Tool.PriceLookup)|list)|length > 0 }})\n}\n\ntest plan_steps_crypto_price_still_works {\n  functions [PlanSteps]\n  args { \n    question \"What is the current price of Bitcoin?\", \n    subqueries [\"Bitcoin price\"] \n  }\n  // Expect a PriceLookup step for Bitcoin (ensure original functionality retained)\n  @@assert({{ (this.steps|selectattr('tool', 'equalto', Tool.PriceLookup)|list)|length > 0 }})\n}\n",
    "rag_agent/llm_calls.baml": "// baml_src/rag_agent/__init__.baml\nclass SubQuestions {\n  questions string[]\n}\n\n// Function to rewrite the query using HyDE principle\nfunction RewriteQuery(question: string) -> string {\n  client Gemini2_5FlashClient\n  prompt #\"\n    Write a detailed possible answer to the user question so the answer itself works as a search query.\n    Question: {{ question }}\n    Answer:\n  \"#\n}\n\n// Function to answer the question based on context\nfunction AnswerQuestionWithContext(question: string, context: string) -> string {\n  client Gemini2_5FlashClient\n  prompt #\"\n    Use the context to answer accurately. If the answer isn't there, say 'I don't know'.\n    Context:\n    {{ context }}\n\n    Question: {{ question }}\n    Answer:\n  \"#\n}\n\n// Function to decompose a question into sub-questions for self-ask\nfunction DecomposeQuestion(question: string) -> SubQuestions {\n  client Gemini2_5FlashClient\n  prompt #\"\n    Decompose the following question into 2-3 self-contained sub-questions that would help answer the main question. Respond ONLY with a JSON object containing a single key \\\"questions\\\" which is a list of strings.\n\n    Example Question: What are the main features of LangGraph and how do they compare to BAML?\n    Example Output:\n    ```json\n    {\n      \\\"questions\\\": [\n        \\\"What are the main features of LangGraph?\\\".\n        \\\"What are the main features of BAML?\\\".\n        \\\"How do LangGraph and BAML features compare?\\\"\n      ]\n    }\n    ```\n\n    Question: {{ question }}\n\n    Output:\n  \"#\n}\n\n// Function to synthesize answers to sub-questions into a final answer\nfunction SynthesizeAnswers(question: string, sub_answers: string[]) -> string {\n  client Gemini2_5FlashClient\n  prompt #\"\n    You are given a main question and several context passages gathered from answering sub-questions derived from the main question. Synthesize these passages into a single, comprehensive answer to the main question.\n\n    Main Question: {{ question }}\n\n    Context Passages (from sub-answers):\n    {% for ans in sub_answers %}\n    - {{ ans }}\n    {% endfor %}\n\n    Synthesized Answer:\n  \"#\n}\n",
    "rank_results.baml": "// baml_src/rank_results.baml\n\n// Define the structure of a single search result item\nclass ResultItem {\n  content string?\n  link string?\n}\n\n// Define the structure for a result with its relevance score\nclass RankedResultItem {\n  content string?\n  link string?\n  relevance_score int @description(\"Relevance score from 0 (not relevant) to 10 (highly relevant)\")\n}\n\n// Define the function to score and rank results\nfunction RankResults(\n  question: string,\n  subqueries: string[], // Provides context on why results were fetched\n  results: ResultItem[], // The raw results to be ranked\n  top_k: int // Number of top results to return\n) -> RankedResultItem[] { // Returns the top_k scored and ranked results\n\n  client Gemini2FlashClient // Or your preferred LLM client\n\n  prompt #\"\nAnalyze the following search results based on their relevance and usefulness for answering the main question: \"{{question}}\".\nThe results were gathered based on these subqueries:\n{% for sq in subqueries %}- {{ sq }}\n{% endfor %}\n\nConsider how well each result addresses the core intent of the question and subqueries.\n\nFor EACH result provided below, assign a relevance_score between 0 (not relevant) and 10 (highly relevant).\n\nThen, return ONLY the top {{ top_k }} results, ordered from highest relevance_score to lowest.\nDo not include results with a score below 3 (or adjust threshold if needed).\nDo not add explanations or commentary outside the structured output.\nMaintain the original content and link for each result you return, and include the assigned relevance_score.\n\nResults to score and rank:\n{% for item in results %}{% if item.content %}\nResult Index: {{ loop.index0 }}\nContent: {{ item.content }}\n{% if item.link %}Link: {{ item.link }}{% endif %}\n\n{% endif %}{% endfor %}\n\nOutput ONLY the ranked list of the top {{ top_k }} relevant results (score >= 3) in the specified BAML class format (list<RankedResultItem>).\nExample output format for top_k=2:\n[\n  {\n    content: \"Highly relevant content snippet 1...\",\n    link: \"http://example.com/link1\",\n    relevance_score: 9\n  },\n  {\n    content: \"Moderately relevant content snippet 2 (no link)...\",\n    link: null,\n    relevance_score: 7\n  }\n]\n\n{{ ctx.output_format }}\n\"#\n}\n\n// Optional: Add a test case\ntest TestRankResultsGeneral {\n  functions [RankResults]\n  args {\n    question \"What are the benefits of renewable energy sources?\"\n    top_k 3\n    subqueries [\"advantages of solar power\", \"benefits of wind energy\", \"renewable energy vs fossil fuels\"]\n    results [\n      {\n        content \"Solar power significantly reduces electricity bills and carbon footprint.\",\n        link \"http://example.com/solar-benefits\"\n      },\n      {\n        content \"Wind turbines can be noisy and impact bird populations.\",\n        link \"http://example.com/wind-drawbacks\"\n      },\n      {\n        content \"Fossil fuels are a major contributor to climate change.\",\n        link \"http://example.com/fossil-fuel-impacts\"\n      },\n      {\n        content \"Renewable energy sources like wind and solar offer long-term sustainability.\",\n        link \"http://example.com/renewable-sustainability\"\n      },\n       {\n        content \"Geothermal energy provides a constant power supply.\",\n        link \"http://example.com/geothermal-info\"\n      },\n      {\n        content \"The process of installing solar panels on a home.\",\n        link \"http://example.com/solar-installation\"\n      }\n    ]\n  }\n  // Assert that we get the requested number of results (top_k)\n  @@assert({{ this|length == 3 }})\n  // Assert that the top result has a high score (e.g., >= 7)\n  @@assert({{ this[0].relevance_score >= 7 }})\n  // Assert that the last result returned still has a reasonable score (e.g., >= 3)\n  @@assert({{ this[-1].relevance_score >= 3 }})\n} ",
}

def get_baml_files():
    return file_map